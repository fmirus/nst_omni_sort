import os
import h5py
import numpy as np
import matplotlib.pyplot as plt

plot_data_file = '/home/flo/data/task_sort_robot.h5'
if os.path.isfile(plot_data_file):
    # data file exists, so simulation ran before
    # no need for running simulation again, so just get data for plotting
    with h5py.File(plot_data_file,'r') as hf:
        print('List of arrays in this file: \n', hf.keys())
        data = {}
        for key in hf.keys():
            print 'key:' , key
            data[key] = np.array(hf.get(key))
            
        # trange = np.array(hf.get('trange'))
        # order_p_x= np.array(hf.get('order_p_x'))
        # order_p_forget = np.array(hf.get('order_p_forget'))
        # order_p_diff = np.array(hf.get('order_p_diff'))
        # order_p_evidence = np.array(hf.get('order_p_evidence'))
        # order_p_neg_min = np.array(hf.get('order_p_neg_min'))
        # order_p_evidence_left = np.array(hf.get('order_p_evidence_left'))
        # order_p_odd = np.array(hf.get('order_p_odd'))
        # order_p_evidence_right = np.array(hf.get('order_p_evidence_right'))
        # target_p_info = np.array(hf.get('target_p_info'))
        # target_left_p_info = np.array(hf.get('target_left_p_info'))
        # target_right_p_info = np.array(hf.get('target_right_p_info'))
        # orientLR_p_x = np.array(hf.get('orientLR_p_x'))
        # orientLR_p_x_pos = np.array(hf.get('orientLR_p_x_pos'))
        # orientLR_p_act = np.array(hf.get('orientLR_p_act'))
        # orientFB_p_act = np.array(hf.get('orientFB_p_act'))
        # orientFB_p_data = np.array(hf.get('orientFB_p_data'))
        # orientFB_p_spd = np.array(hf.get('orientFB_p_spd'))
        # grasp_p_act = np.array(hf.get('grasp_p_act'))
        # putdown_p_act = np.array(hf.get('putdown_p_act'))
        # arm_orientLR_p_act = np.array(hf.get('arm_orientLR_p_act'))
        # arm_orientLR_p_x = np.array(hf.get('arm_orientLR_p_x'))
        # arm_orientLR_p_x_pos = np.array(hf.get('arm_orientLR_p_x_pos'))
        # move_side_p_act = np.array(hf.get('move_side_p_act'))
        # move_side_p_x = np.array(hf.get('move_side_p_x'))
        # move_side_p_pos = np.array(hf.get('move_side_p_pos'))
        # finish_p_act = np.array(hf.get('finish_p_act'))
        # stay_away_p_act = np.array(hf.get('stay_away_p_act'))
        # grip_p_act = np.array(hf.get('grip_p_act'))
        # task_grab_p_act = np.array(hf.get('task_grab_p_act'))
        # task_grab_p_everything = np.array(hf.get('task_grab_p_everything'))
        # grabbed_p_has_grabbed = np.array(hf.get('grabbed_p_has_grabbed'))
        # task_sort_p_act = np.array(hf.get('task_sort_p_act'))
        # task_sort_p_choice = np.array(hf.get('task_sort_p_choice'))
        # task_sort_p_choice_post = np.array(hf.get('task_sort_p_choice_post'))
        # task_sort_p_bg = np.array(hf.get('task_sort_p_bg'))
        # task_sort_p_thal = np.array(hf.get('task_sort_p_thal'))
        # task_sort_p_behave = np.array(hf.get('task_sort_p_behave'))


    data['trange'] *= 60
    periods = [2500, 2860, 4000, 5000, 6670]
    freqs = np.ceil(1000000 / np.array(periods, dtype=float))
    labels = [str(int(freqs[ind])) + ' Hz stim' for ind in range(len(freqs))]

    fig = plt.figure(1)
    fig.suptitle('Grab and Sort network', fontsize=14, fontweight='bold')
    ax = fig.add_subplot(511)
    ax.set_title('a) activation levels of high-level behaviours')
    plt.plot(data['trange'], data['task_sort_p_behave'], lw=2)
    plt.legend(labels=['grab', 'hold_and_side', 'put_down', 'finish'])
    ax = fig.add_subplot(512)
    ax.set_title('b) activation levels of low-level behaviours')
    
    pl1, = plt.plot(data['trange'], data['orientLR_p_act'], lw=2, color='b')
    pl2, = plt.plot(data['trange'], data['orientFB_p_act'], lw=2, color='r')
    pl3, = plt.plot(data['trange'], data['arm_orientLR_p_act'], lw=2, color='m')
    pl4, = plt.plot(data['trange'], data['stay_away_p_act'], lw=2, color='k')
    pl5, = plt.plot(data['trange'], data['grip_p_act'], lw=2, color='g')
    pl6, = plt.plot(data['trange'], data['move_side_p_act'], lw=2, color='c')
    pl7, = plt.plot(data['trange'], data['putdown_p_act'], lw=2, color='y')
    pl8, = plt.plot(data['trange'], data['finish_p_act'], lw=2, color='lime')
    behave_labels=['orientLR', 'orientFB', 'arm_orientLR', 'move_back', 'grip', 'move_side', 'put_down', 'finish']
    l1 = plt.legend(handles=[pl1, pl2, pl3, pl4], labels=behave_labels[:4], loc=1)
    plt.gca().add_artist(l1)
    plt.legend(handles=[pl5, pl6, pl7, pl8], labels=behave_labels[4:], loc=2)
    # ax.set_title('a) x-positions of stimuli in DVS image')
    # ax.set_ylim([-1,1])
    ax = fig.add_subplot(513)
    ax.set_title('c) choice ensemble (state-variables for action-selection)')
    plt.plot(data['trange'], data['task_sort_p_choice'], lw=2)
    plt.legend(labels=['task_activation', 'has_grabbed', 'reached_goal', 'finished'])
    ax = fig.add_subplot(514)
    ax.set_title('d) relevant sensor information of target object')
    plt.plot(data['trange'], data['target_p_info'][:,3::4], lw=2)
    plt.plot(data['trange'], data['target_p_info'][:,8], lw=2, color='lime')
    plt.legend(labels=['lc','rc','ac', 'ax'])
    ax = fig.add_subplot(515)
    
    plt.plot(data['trange'], data['target_left_p_info'][:,0], lw=2)
    plt.plot(data['trange'][:], data['target_right_p_info'][:,4], lw=2)
    ax.set_title('c) x-positions of left/right neighbour objects in resp. cameras')
    plt.legend(labels=['left lx','right rx'])

    # ax = fig.add_subplot(716)
    # plt.plot(data['trange'], data['order_p_x'], lw=2)
    # plt.legend(labels=labels)


    # ax = fig.add_subplot(717)
    # plt.plot(data['trange'], data['order_p_evidence'], lw=2)

    ax.set_xlabel('time (s)')
    
    fig = plt.figure(2)
    fig.suptitle('Hold and Move Side Network', fontsize=14, fontweight='bold')
    ax = fig.add_subplot(411)
    # plt.plot(data['trange'][400:700], data['task_sort_p_behave'][400:700,:], lw=2)
    plt.plot(data['trange'], data['task_sort_p_behave'], lw=2)
    plt.plot(data['trange'], data['task_sort_p_choice'][:,2], lw=2, color='m')
    ax.set_title('a) activation levels of high-level behaviours and goal-position state')
    plt.legend(labels=['grab', 'hold_and_side', 'put_down', 'finish', 'reached_pos'])
    ax = fig.add_subplot(412)
    # plt.plot(data['trange'][400:700], data['target_left_p_info'][400:700,3::4], lw=2)
    plt.plot(data['trange'], data['target_p_info'][:,3::4], lw=2)
    ax.set_title('b) certainties of target object')
    plt.legend(labels=['lc','rc','ac'])
    ax = fig.add_subplot(413)
    # plt.plot(data['trange'][400:700], data['target_left_p_info'][400:700,0::4], lw=2)
    plt.plot(data['trange'], data['target_left_p_info'][:,0], lw=2)
    plt.plot(data['trange'][:], data['target_right_p_info'][:,4], lw=2)
    ax.set_title('c) x-positions of left/right neighbour objects in resp. cameras')
    plt.legend(labels=['left lx','right rx'])
    ax = fig.add_subplot(414)
    # plt.plot(data['trange'][400:700], data['target_left_p_info'][400:700,1::4], lw=2)
    plt.plot(data['trange'], data['target_left_p_info'][:,3], lw=2)
    plt.plot(data['trange'][:], data['target_right_p_info'][:,7], lw=2)
    ax.set_title('d) certainties of left/right neighbour objects in resp. cameras')
    plt.legend(labels=['left lc','right rc'])
    
    ax.set_xlabel('time (s)')

    fig = plt.figure(3)
    fig.suptitle('Grab Network', fontsize=14, fontweight='bold')
    ax = fig.add_subplot(411)
    # plt.plot(data['trange'][400:700], data['task_sort_p_behave'][400:700,:], lw=2)
    plt.plot(data['trange'], data['task_sort_p_behave'], lw=2)
    plt.plot(data['trange'], data['task_sort_p_choice'][:,1], lw=2, color='m')
    ax.set_title('a) activation levels of high-level behaviours and gripper-state')
    plt.legend(labels=['grab', 'hold_and_side', 'put_down', 'finish', 'has_grabbed'])
    ax = fig.add_subplot(412)
    ax.set_title('b) activation levels of low-level behaviours')
    plt.plot(data['trange'], data['orientLR_p_act'], lw=2, color='b')
    plt.plot(data['trange'], data['orientFB_p_act'], lw=2, color='r')
    plt.plot(data['trange'], data['arm_orientLR_p_act'], lw=2, color='m')
    plt.plot(data['trange'], data['stay_away_p_act'], lw=2, color='k')
    plt.plot(data['trange'], data['grip_p_act'], lw=2, color='g')
    plt.plot(data['trange'], data['move_side_p_act'], lw=2, color='c')
    plt.legend(labels=['orientLR', 'orientFB', 'arm_orientLR', 'move_back', 'grip', 'move_side'])
    ax = fig.add_subplot(413)
    ax.set_title('c) certainties of target object')
    plt.plot(data['trange'], data['target_p_info'][:,3::4], lw=2)
    plt.legend(labels=['lc','rc','ac'])
    ax = fig.add_subplot(414)
    plt.plot(data['trange'], data['target_p_info'][:,0::4], lw=2)
    plt.legend(labels=['lx','rx','ax'])
    ax.set_title('d) x-positions of target object')
    # ax = fig.add_subplot(515)
    # ax.set_title('e) x-positions of stimuli in DVS image')
    # plt.plot(data['trange'], data['order_p_x'], lw=2)
    # plt.legend(labels=labels)
    

    ax.set_xlabel('time (s)')

    plt.show()